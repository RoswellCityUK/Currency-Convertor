/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CurrencyConvertor;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import javax.swing.ButtonModel;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

import java.util.HashMap;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

/**
 *
 * @author Tomasz Grabowski
 */
public class ConvertorUI extends javax.swing.JFrame {

    private double convertAmount;
    private double convertResult;
    private double convertRate;
    
    public HashMap<String, Double> conversionRates = new HashMap<>();
    
    private String convertFrom;
    private String convertTo;
        
    
    //private static final String FILENAME = "http://www.hmrc.gov.uk/softwaredevelopers/rates/exrates-monthly-0122.XML";
    private static final String FILENAME = "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml";
    /**
     * Creates new form ConvertorUI
     */
    public ConvertorUI() {
        initComponents();
        UpdateConversionRates();
        ChangeConversionRate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnsConvertFrom = new javax.swing.ButtonGroup();
        btnsConvertTo = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        pnlConvertFrom = new javax.swing.JPanel();
        lblAmount = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        btnFromGbp = new javax.swing.JRadioButton();
        btnFromUsd = new javax.swing.JRadioButton();
        btnFromPln = new javax.swing.JRadioButton();
        pnlConvertTo = new javax.swing.JPanel();
        lblResult = new javax.swing.JLabel();
        txtResult = new javax.swing.JTextField();
        btnToPln = new javax.swing.JRadioButton();
        btnToGbp = new javax.swing.JRadioButton();
        btnToUsd = new javax.swing.JRadioButton();
        lblConversionRate = new javax.swing.JLabel();
        lblConversionRateResult = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        lblConvertRateUpdate = new javax.swing.JLabel();
        lblConvertRateUpdateDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setText("Curency Converter");

        pnlConvertFrom.setBorder(javax.swing.BorderFactory.createTitledBorder("Convert from"));

        lblAmount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAmount.setLabelFor(txtAmount);
        lblAmount.setText("Amount to convert:");

        txtAmount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAmount.setText("1");
        txtAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAmountKeyReleased(evt);
            }
        });

        btnsConvertFrom.add(btnFromGbp);
        btnFromGbp.setSelected(true);
        btnFromGbp.setText("GBP");
        btnFromGbp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFromGbpActionPerformed(evt);
            }
        });

        btnsConvertFrom.add(btnFromUsd);
        btnFromUsd.setText("USD");
        btnFromUsd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFromUsdActionPerformed(evt);
            }
        });

        btnsConvertFrom.add(btnFromPln);
        btnFromPln.setText("PLN");
        btnFromPln.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFromPlnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConvertFromLayout = new javax.swing.GroupLayout(pnlConvertFrom);
        pnlConvertFrom.setLayout(pnlConvertFromLayout);
        pnlConvertFromLayout.setHorizontalGroup(
            pnlConvertFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertFromLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConvertFromLayout.createSequentialGroup()
                        .addGroup(pnlConvertFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAmount)
                            .addGroup(pnlConvertFromLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnFromGbp)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(pnlConvertFromLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlConvertFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFromPln)
                            .addComponent(btnFromUsd))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlConvertFromLayout.setVerticalGroup(
            pnlConvertFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertFromLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAmount)
                    .addComponent(txtAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFromGbp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFromUsd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFromPln)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlConvertTo.setBorder(javax.swing.BorderFactory.createTitledBorder("Convert to"));

        lblResult.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblResult.setLabelFor(txtResult);
        lblResult.setText("After conversion:");

        txtResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtResult.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtResult.setText("0");
        txtResult.setEnabled(false);

        btnsConvertTo.add(btnToPln);
        btnToPln.setText("PLN");
        btnToPln.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToPlnActionPerformed(evt);
            }
        });

        btnsConvertTo.add(btnToGbp);
        btnToGbp.setText("GBP");
        btnToGbp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToGbpActionPerformed(evt);
            }
        });

        btnsConvertTo.add(btnToUsd);
        btnToUsd.setSelected(true);
        btnToUsd.setText("USD");
        btnToUsd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToUsdActionPerformed(evt);
            }
        });

        lblConversionRate.setText("Conversion Rate:");

        lblConversionRateResult.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblConversionRateResult.setText("0");

        javax.swing.GroupLayout pnlConvertToLayout = new javax.swing.GroupLayout(pnlConvertTo);
        pnlConvertTo.setLayout(pnlConvertToLayout);
        pnlConvertToLayout.setHorizontalGroup(
            pnlConvertToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertToLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlConvertToLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlConvertToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnToGbp)
                            .addComponent(btnToUsd)
                            .addComponent(btnToPln)))
                    .addGroup(pnlConvertToLayout.createSequentialGroup()
                        .addComponent(lblResult)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlConvertToLayout.createSequentialGroup()
                        .addComponent(lblConversionRate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblConversionRateResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        pnlConvertToLayout.setVerticalGroup(
            pnlConvertToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertToLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResult)
                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnToGbp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnToUsd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnToPln)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConvertToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConversionRate, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblConversionRateResult))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblConvertRateUpdate.setText("Conversion rates update date:");

        lblConvertRateUpdateDate.setText("22/05/2021");

        jLabel1.setText("Source:");

        jLabel2.setText("European Central Bank");

        lblAuthor.setText("Author: Tomasz Grabowski");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblAuthor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnlConvertFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblConvertRateUpdate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblConvertRateUpdateDate)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2))
                                    .addComponent(pnlConvertTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConvertRateUpdate)
                    .addComponent(lblConvertRateUpdateDate)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlConvertTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlConvertFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(lblAuthor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtAmountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmountKeyReleased
        // TODO add your handling code here:
        CalculateConvertedAmount();
    }//GEN-LAST:event_txtAmountKeyReleased

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnFromUsdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFromUsdActionPerformed
        // TODO add your handling code here:
        ChangeConversionRate();
    }//GEN-LAST:event_btnFromUsdActionPerformed

    private void btnFromGbpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFromGbpActionPerformed
        // TODO add your handling code here:
        ChangeConversionRate();
    }//GEN-LAST:event_btnFromGbpActionPerformed

    private void btnFromPlnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFromPlnActionPerformed
        // TODO add your handling code here:
        ChangeConversionRate();
    }//GEN-LAST:event_btnFromPlnActionPerformed

    private void btnToGbpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToGbpActionPerformed
        // TODO add your handling code here:
        ChangeConversionRate();
    }//GEN-LAST:event_btnToGbpActionPerformed

    private void btnToUsdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToUsdActionPerformed
        // TODO add your handling code here:
        ChangeConversionRate();
    }//GEN-LAST:event_btnToUsdActionPerformed

    private void btnToPlnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToPlnActionPerformed
        // TODO add your handling code here:
        ChangeConversionRate();
    }//GEN-LAST:event_btnToPlnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConvertorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConvertorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConvertorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConvertorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ConvertorUI().setVisible(true);
        });
    }
    
    private void CalculateConvertedAmount(){
        convertAmount = Double.parseDouble(txtAmount.getText());
        convertResult = roundDouble(convertAmount * convertRate, 2);
        DisplayConversionResult();
    }
    
    private void ChangeConversionRate(){
        convertRate = roundDouble(GetToRate()/GetFromRate(), 4);
        DisplayConversionRate();
        CalculateConvertedAmount();
    }
    
    private double roundDouble(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        BigDecimal bd = BigDecimal.valueOf(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }
    
    private double GetFromRate(){
        if(btnFromGbp.isSelected()){
            convertFrom = "GBP";
            return conversionRates.get(convertFrom);
        }
        if(btnFromUsd.isSelected()){
            convertFrom = "USD";
            return conversionRates.get(convertFrom);
        }
        if(btnFromPln.isSelected()){
            convertFrom = "PLN";
            return conversionRates.get(convertFrom);
        }
        return 1;
    }
    
    private double GetToRate(){
        if(btnToGbp.isSelected()){
            convertTo = "GBP";
            return conversionRates.get(convertTo);
        }
        if(btnToUsd.isSelected()){
            convertTo = "USD";
            return conversionRates.get(convertTo);
        }
        if(btnToPln.isSelected()){
            convertTo = "PLN";
            return conversionRates.get(convertTo);
        }
        return 1;
    }
    
    private void DisplayConversionRate(){
        lblConversionRateResult.setText(convertRate + " " + convertFrom + "/" + convertTo);
    }
    private void DisplayConversionResult(){
        txtResult.setText(String.valueOf(convertResult));;
    }
    
    private final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

    private void UpdateConversionRates() {
                
        try {

            URLConnection conn = new URL(FILENAME).openConnection();

            try (InputStream is = conn.getInputStream()) {

                // unknown XML better turn on this
                dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

                DocumentBuilder dBuilder = dbf.newDocumentBuilder();

                Document doc = dBuilder.parse(is);

                Element element = doc.getDocumentElement();
                
                NodeList nodeList = element.getElementsByTagName("Cube");
                //String updateDate = element.getAttribute("Period");
                //lblConvertRateUpdateDate.setText(updateDate);
                //System.out.print(nodeList.getLength());
                 if (nodeList != null && nodeList.getLength() > 0) {
                    for (int i = 0; i < nodeList.getLength(); i++) {
                      Node node = nodeList.item(i);
                      if (node instanceof Element) {
                        if ("Cube".equals(node.getNodeName())
                            || "Cube".equals(node.getLocalName())) {
                          String currencyCode = ((Element) node).getAttribute("currency");
                          String updateDate = ((Element) node).getAttribute("time");
                          if (currencyCode != null && currencyCode.length() > 0) {
                            String currencyRate = ((Element) node).getAttribute("rate");
                            if (currencyRate != null && currencyRate.length() > 0) {
                              conversionRates.put(currencyCode, Double.parseDouble(currencyRate));
                            } else {
                              throw new UnsupportedOperationException("Unsupported <property name=\"" + currencyCode + "\"> sub tag, Only supported <property name=\"" + currencyCode + "\" ref=\"...\" /> or <property name=\"" + currencyCode + "\" value=\"...\" />");
                            }
                          } else if (updateDate != null && updateDate.length() > 0) {
                            lblConvertRateUpdateDate.setText(updateDate);
                          }
                        }
                      }
                    }
                  }
            }

        } catch (IOException | NumberFormatException | ParserConfigurationException | DOMException | SAXException e) {
            throw new IllegalArgumentException("Invalid request for domain :");
        }
    }
    
    /*private void UpdateConversionRates() {
        
        conversionRates.put("GBP", (double) 1);
        
        try {

            URLConnection conn = new URL(FILENAME).openConnection();

            try (InputStream is = conn.getInputStream()) {

                // unknown XML better turn on this
                dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

                DocumentBuilder dBuilder = dbf.newDocumentBuilder();

                Document doc = dBuilder.parse(is);

                Element element = doc.getDocumentElement();
                
                NodeList nodeList = element.getElementsByTagName("exchangeRate");
                String updateDate = element.getAttribute("Period");
                lblConvertRateUpdateDate.setText(updateDate);
                //System.out.print(nodeList.getLength());
                 if (nodeList != null && nodeList.getLength() > 0) {
                    for (int i = 0; i < nodeList.getLength(); i++)
                    {
                         Element node = (Element) nodeList.item(i);
                         String currencyCode = node.getElementsByTagName("currencyCode").item(0).getTextContent();
                         double currencyRateNew = Double.parseDouble(node.getElementsByTagName("rateNew").item(0).getTextContent());
                         if(!currencyCode.isBlank() && currencyRateNew != 0){
                            conversionRates.put(currencyCode, currencyRateNew);
                         }
                    }                    
                 }
            }

        } catch (IOException | NumberFormatException | ParserConfigurationException | DOMException | SAXException e) {
            throw new IllegalArgumentException("Invalid request for domain :");
        }
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JRadioButton btnFromGbp;
    private javax.swing.JRadioButton btnFromPln;
    private javax.swing.JRadioButton btnFromUsd;
    private javax.swing.JRadioButton btnToGbp;
    private javax.swing.JRadioButton btnToPln;
    private javax.swing.JRadioButton btnToUsd;
    private javax.swing.ButtonGroup btnsConvertFrom;
    private javax.swing.ButtonGroup btnsConvertTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblConversionRate;
    private javax.swing.JLabel lblConversionRateResult;
    private javax.swing.JLabel lblConvertRateUpdate;
    private javax.swing.JLabel lblConvertRateUpdateDate;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlConvertFrom;
    private javax.swing.JPanel pnlConvertTo;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtResult;
    // End of variables declaration//GEN-END:variables
}
